datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  role          Role            @default(USER)
  password      String?
  status        Status          @default(ACTIVE)
  emailVerified DateTime?
  image         String?
  transactions Transaction[]
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])

  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])

  @@map("verification_tokens")
}

model Transaction{
  id            String          @id @default(cuid())
  description   String
  amount        Float
  type          TransactionType @default(EXPENSE)
  userId        String
  user          User            @relation(fields: [userId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
@@map("transactions")

}
 
enum Role {
  USER
  ADMIN
}
enum TransactionType {
  INCOME
  EXPENSE
}
enum Status {
  ACTIVE
  INACTIVE
}